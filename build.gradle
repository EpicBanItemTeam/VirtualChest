buildscript {
    repositories {
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'minecrell'
            url = 'http://repo.minecrell.net/releases'
        }
        maven {
            name = 'Sonatype Snapshots'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.minecrell:VanillaGradle:2.0.3_1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.javalite:activejdbc-gradle-plugin:2.2'
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.javalite.activejdbc'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecrell.vanilla.server.library'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def getProjectVersion = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(1) // drop the 'v' prefix
}

def getProjectGitHash = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getProjectReleaseDate = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'show', '-s', '--format=%ct'
        standardOutput = stdout
    }
    // noinspection UnnecessaryQualifiedReference
    return new java.util.Date(Long.valueOf(stdout.toString().trim()) * 1000)
}

repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
    maven {
        name = 'bstats-repo'
        url = 'http://repo.bstats.org/content/repositories/releases'
    }
    maven {
        name = 'Sonatype Snapshots'
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
}

version = getProjectVersion()
group = 'com.github.ustc_zzzz'
archivesBaseName = 'VirtualChest'

minecraft {
    version = '1.12.2'
    mappings = 'snapshot_20171003'

    replace '@version@', project.version
    replace '@git_hash@', getProjectGitHash()
    replace '@release_date@', getProjectReleaseDate().with {
        // noinspection UnnecessaryQualifiedReference
        def format = new java.text.SimpleDateFormat('yyyy-MM-dd', Locale.ENGLISH) // RFC 3339
        format.setTimeZone(TimeZone.getTimeZone('GMT+08:00')) // the author comes from China
        return format.format(it)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:all' // << '-Werror'
}

task apiJar(type: Jar, dependsOn: sourceJar) {
    baseName = 'VirtualChestAPI'

    from sourceSets.api.allSource
    from sourceSets.api.output
    from 'LICENSE'
}

artifacts {
    archives apiJar
    archives shadowJar
    archives sourceJar
}

dependencies {
    compile 'org.bstats:bstats-sponge:1.2'
    compile 'org.javalite:activejdbc:2.2'

    compile 'org.spongepowered:spongeapi:7.1.0-SNAPSHOT'
    compile 'org.spongepowered:spongecommon:7.1.0-SNAPSHOT:dev'
    compile 'com.github.rojo8399:PlaceholderAPI:master-SNAPSHOT'
    compile 'com.github.randombyte-developer:byte-items:v2.3.1'
}

sourceSets {
    main {
        java.srcDir 'src/'
        java.srcDir 'api/'
        resources.srcDir 'resources/'
    }
    api {
        java.srcDir 'api/'
    }
}

publishing {
    publications {
        maven(MavenPublication).artifact apiJar
        maven(MavenPublication).artifactId 'VirtualChestAPI'
    }
}

bintray {
    user = 'zzzz'
    publications = ['maven']
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    pkg {
        repo = 'VirtualChest'
        licenses = ['LGPL-3.0']
        name = 'VirtualChestAPI'
        vcsUrl = 'https://github.com/ustc-zzzz/VirtualChest.git'
        version {
            name = project.version
            vcsTag = 'v' + project.version
            released = getProjectReleaseDate()
            desc = 'VirtualChestAPI v' + project.version
        }
    }
}

jar {
    classifier = 'pure'
}

shadowJar {
    minimize()
    classifier = null

    dependencies {
        it.include it.dependency('org.bstats:.*')
        it.include it.dependency('org.javalite:.*')
        it.include it.dependency('com.fasterxml.jackson.core:.*')
    }

    relocate 'org.bstats', project.group.toString() + '.virtualchest.util.repackage.org.bstats'
    relocate 'org.javalite', project.group.toString() + '.virtualchest.util.repackage.org.javalite'
    relocate 'com.fasterxml.jackson', project.group.toString() + '.virtualchest.util.repackage.com.fasterxml.jackson'
}

reobf {
    jar {
        mappingType = 'SEARGE'
    }
}

reobfJar.dependsOn shadowJar
